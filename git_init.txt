initialize-----------
mkdir name >> make a local directory
cd dir_name >> go to the directory
git init >> initialize the local directory
git clone directory_link >> clone a cloud directory to a local directory
git status >> check the current status

add-------------
git add --all/-A >> staged all changes
git add . >> stagged all from current directory
git add * >> stagged all except deleted item
git add file_name >> stagged specific item of name
git add file_name... >> to update what will be committed)
git add dir_name/file_name >> stagged spesific item from a specific directory
git add *.txt >> stagged all with specific extension except deleted item

commit---------------
git commit -m "comment" >> save all the changes with comment on changes

reset----------------
git reset >> undo all last changes. [it only retrive the changes, cannot retrive the deleted file]
git reset HEAD~ >> undo all last changes even after commit. It takes back you initialization, you have to stagged again. (*Generally, you cannot reset after commit)
git reset --hard >> undo all the recent changes also can retrive last deleted file

remove------------
git rm file_name >> removed the file also stagged
git rm file_name -f >> it forcely remove the file even after making change.
git rm cached file_name >> id donot delete the actual file but stagged the the change to be commited
git rm folder_name >> remove a specific folder
git rm -r folder_name >> recursively remove all the corresponding folders

restore-----------
git restore file_name... >> to discard changes in working directory

branch------------
git branch >> checks how many branch are there now
git branch branch_name >> make a branch
git checkout branch_name >> switched to the specific branch
git merge branch_name >> merge the changes with a specific branch(say-main) from a specific branch. [Suppose you make some changes from a specific branch and switched to another branch and also make some changes. Now you wish to merge the changes. You have to merge from branch to main branch and vice versa. like-(branch to main) and (main to branch)][Merge Conflict- When more than one branches make changes in the same file or they make a same named file. In case of merge conflict, any of the branch have to make changes of their code.]

push--------------
git push >> push all changes to the remote directory (cloud)
git push origin branch_name >> if you have more than one branch, you can push all to a specific branch. If you want to push to another branch you have to first checkout (switch) to the branch.
git push --force >> it will forcly push the updates

fetch-------------
git fetch >> fetch the changes from remote to local. After fetching you have to merge the change.
git pull >> its fetch and merge at a time. [That means pull = fetch + merge]
